
bin/main.rv32.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_start>:

extern char __stack_top;

void __attribute__((section(".text._start"))) __attribute__((naked)) _start(void) {

    register char* sp asm("sp") = &__stack_top;
   0:	000027b7          	lui	a5,0x2
   4:	41078113          	addi	sp,a5,1040 # 2410 <__stack_top>
    print_str("hello");
   8:	000027b7          	lui	a5,0x2
   c:	00078513          	mv	a0,a5
  10:	028000ef          	jal	38 <print_str>
    run();
  14:	080000ef          	jal	94 <run>
    end();
  18:	00100293          	li	t0,1
  1c:	01529073          	csrw	seed,t0
  20:	00000013          	nop

00000024 <print_char>:

// Syscall numbers
#define SYS_PRINT_CHAR 1
#define SYS_EXIT 93 // Similar to Linux

static inline void __attribute__((naked)) print_char(const char c){
  24:	00050793          	mv	a5,a0
    register int a0 asm("a0") = c;        // Force a0 allocation
  28:	00078513          	mv	a0,a5
    register int a7 asm("a7") = SYS_PRINT_CHAR;  // Force a7 allocation
  2c:	00100893          	li	a7,1
    
    asm volatile(
  30:	00000073          	ecall
        "ecall"
        : 
        : "r"(a0), "r"(a7)  // Use the allocated registers
        : "memory"
    );
}
  34:	00000013          	nop

00000038 <print_str>:

static inline void print_str(const char *str) {
  38:	fd010113          	addi	sp,sp,-48
  3c:	02112623          	sw	ra,44(sp)
  40:	02812423          	sw	s0,40(sp)
  44:	03010413          	addi	s0,sp,48
  48:	fca42e23          	sw	a0,-36(s0)
    while (1) {
        char c = *str;
  4c:	fdc42783          	lw	a5,-36(s0)
  50:	0007c783          	lbu	a5,0(a5) # 2000 <run+0x1f6c>
  54:	fef407a3          	sb	a5,-17(s0)
        if (c == 0) break;
  58:	fef44783          	lbu	a5,-17(s0)
  5c:	02078063          	beqz	a5,7c <print_str+0x44>
        print_char(c);
  60:	fef44783          	lbu	a5,-17(s0)
  64:	00078513          	mv	a0,a5
  68:	fbdff0ef          	jal	24 <print_char>
        str++;
  6c:	fdc42783          	lw	a5,-36(s0)
  70:	00178793          	addi	a5,a5,1
  74:	fcf42e23          	sw	a5,-36(s0)
    while (1) {
  78:	fd5ff06f          	j	4c <print_str+0x14>
        if (c == 0) break;
  7c:	00000013          	nop
    }
}
  80:	00000013          	nop
  84:	02c12083          	lw	ra,44(sp)
  88:	02812403          	lw	s0,40(sp)
  8c:	03010113          	addi	sp,sp,48
  90:	00008067          	ret

00000094 <run>:
int run() {
  94:	ff010113          	addi	sp,sp,-16
  98:	00812623          	sw	s0,12(sp)
  9c:	01010413          	addi	s0,sp,16
    return 5;
  a0:	00500793          	li	a5,5
}
  a4:	00078513          	mv	a0,a5
  a8:	00c12403          	lw	s0,12(sp)
  ac:	01010113          	addi	sp,sp,16
  b0:	00008067          	ret

Disassembly of section .rodata:

00002000 <.rodata>:
    2000:	6568                	.insn	2, 0x6568
    2002:	6c6c                	.insn	2, 0x6c6c
    2004:	0000006f          	j	2004 <run+0x1f70>
